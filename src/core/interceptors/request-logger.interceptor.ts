import { Injectable, NestInterceptor, ExecutionContext, CallHandler, Logger } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class RequestLoggerInterceptor implements NestInterceptor {
  private readonly logger = new Logger('API');

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const req = context.switchToHttp().getRequest();
    const { method, url, body, headers } = req;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    this.logger.debug(`‚¨áÔ∏è REQUEST: ${method} ${url}`);
    this.logger.debug(`üì¶ BODY: ${JSON.stringify(body)}`);
    this.logger.debug(`üîë HEADERS: ${JSON.stringify(headers)}`);
    
    const now = Date.now();
    
    return next.handle().pipe(
      tap({
        next: (response) => {
          const responseTime = Date.now() - now;
          this.logger.debug(`‚¨ÜÔ∏è RESPONSE: ${method} ${url} - ${responseTime}ms`);
          this.logger.debug(`üìã DATA: ${JSON.stringify(response).substring(0, 300)}${JSON.stringify(response).length > 300 ? '...' : ''}`);
        },
        error: (error) => {
          const responseTime = Date.now() - now;
          let errorLocation = '';
          
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          if (error.stack) {
            const stackLines = error.stack.split('\n');
            // ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ)
            const projectStackLine = stackLines.find(line => 
              line.includes('/src/') && !line.includes('node_modules')
            );
            
            if (projectStackLine) {
              // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
              const match = projectStackLine.match(/\((.+):(\d+):(\d+)\)/) || 
                            projectStackLine.match(/at (.+):(\d+):(\d+)/);
              if (match) {
                const [_, filePath, line, column] = match;
                errorLocation = `üìç ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà: ${filePath.split('/src/')[1]}:${line}`;
              }
            }
          }
          
          this.logger.error(`‚ùå ERROR: ${method} ${url} - ${responseTime}ms`);
          this.logger.error(`üí£ MESSAGE: ${error.message}`);
          if (errorLocation) {
            this.logger.error(errorLocation);
          }
          this.logger.error(`üîç STACK: ${error.stack}`);
        }
      }),
    );
  }
}